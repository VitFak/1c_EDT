#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) создается прикладным разработчиком
//  в модулях объектов, тип которых задан в одной из подписок на событие.
//  ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//  В процедуре выполняется заполнение наборов значений доступа по свойствам объекта.
//  
// Параметры:
//  Таблица - ТаблицаЗначений - возвращаемая функцией ТаблицаНаборыЗначенийДоступа.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	// Логика ограничения для
	// - чтения:    Автор ИЛИ Исполнитель (с учетом адресации) ИЛИ Проверяющий (с учетом адресации)
	// - изменения: Автор.
	
	// Если предмет не задан (т.е. бизнес-процесс без основания),
	// тогда предмет не участвует в логике ограничения.
	
	// Чтение, Изменение: набор № 1.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 1;
	Строка.Чтение          = Истина;
	Строка.Изменение       = Истина;
	Строка.ЗначениеДоступа = Автор;
	
	// Чтение: набор № 2.
	Строка = Таблица.Добавить();
	Строка.НомерНабора     = 2;
	Строка.Чтение          = Истина;
	Строка.ЗначениеДоступа = ГруппаИсполнителейЗадач;
	
	// Чтение: набор № 3.
	//Строка = Таблица.Добавить();
	//Строка.НомерНабора     = 3;
	//Строка.Чтение          = Истина;
	//Строка.ЗначениеДоступа = ГруппаИсполнителейЗадачПроверяющий;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// Актуализирует значения реквизит невыполненных задач 
// согласно реквизитам бизнес-процесса Задание:
//   Важность, СрокИсполнения, Наименование и Автор.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос( 
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Выполнена = ЛОЖЬ");
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
			ЗадачаОбъект.Наименование =  НаименованиеЗадачиДляВыполнения();
			ЗадачаОбъект.Автор = Автор;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытий

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса.

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПроверитьПраваНаИзменениеСостоянияБизнесПроцесса(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ГлавнаяЗадача) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавнаяЗадача, "БизнесПроцесс") = ЭтотОбъект.Ссылка Тогда
		
		ВызватьИсключение НСтр("ru = 'Собственная задача бизнес-процесса не может быть указана как главная задача.'");
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ГруппаИсполнителейЗадач = ?(ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей"), 
		БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Исполнитель, ОсновнойОбъектАдресации, ДополнительныйОбъектАдресации), 
		Исполнитель);
	//ГруппаИсполнителейЗадачПроверяющий = ?(ТипЗнч(Проверяющий) = Тип("СправочникСсылка.РолиИсполнителей"), 
	//	БизнесПроцессыИЗадачиСервер.ГруппаИсполнителейЗадач(Проверяющий, ОсновнойОбъектАдресацииПроверяющий, ДополнительныйОбъектАдресацииПроверяющий), 
	//	Проверяющий);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.АвторизованныйПользователь();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		НаПроверке = Истина;
		//Проверяющий = Пользователи.АвторизованныйПользователь();
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Пользователи") Тогда
			Исполнитель = ДанныеЗаполнения;
		Иначе
			// Для возможности автоподбора в незаполненном поле Исполнитель.
			Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") 
		И ДанныеЗаполнения <> Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			Предмет = ДанныеЗаполнения;
		Иначе
			Предмет = ДанныеЗаполнения.Предмет;
		КонецЕсли;
		
	КонецЕсли;	
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив();
	//Если Не НаПроверке Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Проверяющий");
	//КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	НомерИтерации = 0;
	Выполнено = Ложь;
	Подтверждено = Ложь;
	РезультатВыполнения = "";
	ДатаЗавершения = '00010101000000';
	Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута.

Процедура ВыполнитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	НомерИтерации = НомерИтерации + 1;
	Записать();
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.Наименование = НаименованиеЗадачиДляВыполнения();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
		Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Архитектор Тогда
			ТекстПисьма = "Новая заявка №"+Задача.Предмет.Номер+" создана. Ознакомьтесь с перечнем конструкций и необходимого сырья."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Производственник,Задача.Ссылка,ТекстПисьма);
			
			ТекстПисьма = "Новая заявка №"+Задача.Предмет.Номер+" создана. Необходимо отработать."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.РольИсполнителя,Задача.Ссылка,ТекстПисьма);
		ИначеЕсли Задача.РольИсполнителя = Справочники.РолиИсполнителей.Монтажник Тогда	
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" спроектирована."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.Автор,Задача.Ссылка,ТекстПисьма);	
			
			ТекстПисьма = "Новая заявка №"+Задача.Предмет.Номер+" создана. Ознакомьтесь с перечнем конструкций и необходимого сырья."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Производственник,Задача.Ссылка,ТекстПисьма);
			
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" спроектирована. Необходимо скорректировать"+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.РольИсполнителя,Задача.Ссылка,ТекстПисьма);	
		ИначеЕсли Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда 	
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" скорректирована."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.Автор,Задача.Ссылка,ТекстПисьма);			
			
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" скорректирована."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Архитектор,Задача.Ссылка,ТекстПисьма);			
			
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" спроектирована. Необходимо произвести"+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.РольИсполнителя,Задача.Ссылка,ТекстПисьма);
			
		КонецЕсли;                               
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоработатьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	НомерИтерации = НомерИтерации + 1;
	Записать();
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);

		Задача.Исполнитель = Автор;

		Задача.Наименование = НаименованиеЗадачиДляВыполнения();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
		Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Архитектор Тогда
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" доработана. Необходимо продолжить выполнение заявки."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Архитектор,Задача.Ссылка,ТекстПисьма);	
		ИначеЕсли Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" доработана. Необходимо продолжить выполнение заявки."+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Производственник,Задача.Ссылка,ТекстПисьма);	
			
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры


Процедура ВыполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Предмет = Неопределено Или Предмет.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	РезультатВыполнения = РезультатВыполненияТочкиВыполнить(Задача) + РезультатВыполнения;
	Записать();
	
	Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда 	
		ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" исполнена. Необходимо Сообщить клиенту."+Символы.ПС
		+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
		ОтправитьУведомлениеИсполнителям(Задача.Автор,Задача.Ссылка,ТекстПисьма);			
		
		ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" исполнена."+Символы.ПС
		+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
		ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Архитектор,Задача.Ссылка,ТекстПисьма);			
		
		ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" исполнена."+Символы.ПС
		+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
		ОтправитьУведомлениеИсполнителям(Справочники.РолиИсполнителей.Монтажник,Задача.Ссылка,ТекстПисьма);
		
	КонецЕсли;  	
КонецПроцедуры



Процедура ПроверкаТипаСделкиПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ТипЗнч(Предмет) = Тип("ДокументСсылка.Заявка") Тогда
		Если Предмет.Сделка = Перечисления.ВидыСделок.Проект Тогда
			Результат = Истина;
		Иначе
			Результат = Ложь;
		КонецЕсли; 
	Иначе
		Результат = Ложь;
	КонецЕсли; 
	
	

КонецПроцедуры


Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = БизнесПроцессыИЗадачиСервер.ДатаЗавершенияБизнесПроцесса(Ссылка);
	Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьПредметЗадач()

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
		ЭлементБлокировки.УстановитьЗначение("БизнесПроцесс", Ссылка);
		Блокировка.Заблокировать();
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Предмет = Предмет;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// Это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

Функция НаименованиеЗадачиДляВыполнения()
	
	Возврат Наименование;	
	
КонецФункции

Функция СрокИсполненияЗадачиДляВыполнения()
	
	Возврат СрокИсполнения;	
	
КонецФункции

Функция НаименованиеЗадачиДляПроверки()
	
	Возврат БизнесПроцессы.ОбработкаЗаявки.ТочкиМаршрута.Проверить.НаименованиеЗадачи + ": " + Наименование;
	
КонецФункции

//Функция СрокИсполненияЗадачиДляПроверки()
//	
//	Возврат СрокПроверки;	
//	
//КонецФункции

Функция РезультатВыполненияТочкиВыполнить(Знач ЗадачаСсылка)
	
	СтрокаФормат = ?(Выполнено,
	    НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'"),
		НСтр("ru = '%1, %2 отклонил(а) задачу:
		           |%3
		           |'"));
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаДанные.ДатаИсполнения, ЗадачаДанные.Исполнитель, Комментарий);
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияТочкиПроверить(Знач ЗадачаСсылка)  
	
	Если НЕ Подтверждено Тогда
		СтрокаФормат = НСтр("ru = '%1, %2 вернул(а) задачу на доработку:
			|%3
			|'");
	Иначе
		СтрокаФормат = ?(Выполнено,
			НСтр("ru = '%1, %2 подтвердил(а) выполнение задачи:
			           |%3
			           |'"),
			НСтр("ru = '%1, %2 подтвердил(а) отмену задачи:
			           |%3
			           |'"));
	КонецЕсли;
	
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, ЗадачаДанные.ДатаИсполнения, ЗадачаДанные.Исполнитель, Комментарий);
	Возврат Результат;

КонецФункции



Процедура ВернутьПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Не Подтверждено;
КонецПроцедуры

Процедура ВернутьМонтажникуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Не Подтверждено;
КонецПроцедуры

Процедура ВернутьПроизводственникуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Результат = Не Подтверждено;
КонецПроцедуры





#КонецОбласти

Процедура ОтправитьУведомлениеИсполнителям(Исполнитель, Задача, ТекстПисьма)
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.РолиИсполнителей") Тогда
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсполнителиЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ИсполнителиЗадач КАК ИсполнителиЗадач
		|ГДЕ
		|	ИсполнителиЗадач.РольИсполнителя = &РольИсполнителя";
		
		Запрос.УстановитьПараметр("РольИсполнителя", Исполнитель);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОтправитьУведомлениеОНовыхЗадачах(Выборка.Исполнитель, Задача, ТекстПисьма)
		КонецЦикла;
	Иначе
		ОтправитьУведомлениеОНовыхЗадачах(Исполнитель, Задача, ТекстПисьма)
	КонецЕсли;
		
КонецПроцедуры
 

Процедура ОтправитьУведомлениеОНовыхЗадачах(Исполнитель, Задача, ТекстПисьма)
	
		ПочтовыйАдресПолучателя = "";
		ПриПолученииАдресаЭлектроннойПочты(Исполнитель, ПочтовыйАдресПолучателя);
		Если ПустаяСтрока(ПочтовыйАдресПолучателя) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Уведомление не отправлено, так как не указан почтовый адрес у пользователя %1.'"), Строка(Исполнитель));
			Сообщение.Сообщить();
			возврат;
		КонецЕсли;
		
		
		ТемаПисьма = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Направлены задачи - %1'"), Метаданные.КраткаяИнформация);
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Тема", ТемаПисьма);
		ПараметрыПисьма.Вставить("Тело", ТекстПисьма);
		ПараметрыПисьма.Вставить("Кому", ПочтовыйАдресПолучателя);
		
		МодульРаботаСПочтовымиСообщениями = ОбщегоНазначения.ОбщийМодуль("РаботаСПочтовымиСообщениями");
		Попытка 
			МодульРаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(
			МодульРаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись(), ПараметрыПисьма);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не отправлено письмо на почту: "+ПочтовыйАдресПолучателя;
			Сообщение.Сообщить(); 
		КонецПопытки;
		
		

КонецПроцедуры

// Возвращает адрес электронной почты пользователя Получатель для рассылки уведомлений о задачах.
//
// Параметры:
//  Получатель  - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи - исполнитель задачи.
//  Адрес       - Строка - возвращаемый адрес электронной почты.
//
//
Процедура ПриПолученииАдресаЭлектроннойПочты(Знач Получатель, Адрес) 
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтактнаяИнформация") Тогда
		МодульУправлениеКонтактнойИнформацией = ОбщегоНазначения.ОбщийМодуль("УправлениеКонтактнойИнформацией");
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			Адрес = МодульУправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Получатель, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		//ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		//	Адрес = ЭлектроннаяПочтаВнешнегоПользователя(Получатель);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры




#КонецЕсли
Процедура ПроизвестиПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
		НомерИтерации = НомерИтерации + 1;
	Записать();
	
	// Устанавливаем реквизиты адресации и доп. реквизиты для каждой задачи.
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.Наименование = НаименованиеЗадачиДляВыполнения();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляВыполнения();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	
		Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда 	
			ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" скорректирована. Необходимо произвести"+Символы.ПС
			+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
			ОтправитьУведомлениеИсполнителям(Задача.РольИсполнителя,Задача.Ссылка,ТекстПисьма);			
						
		КонецЕсли;                               
		
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РезультатВыполнения = РезультатВыполненияТочкиВыполнить(Задача) + РезультатВыполнения;
	Записать();
	
	Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда 	
		ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" исполнена. Необходимо Сообщить клиенту."+Символы.ПС
		+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
		ОтправитьУведомлениеИсполнителям(Задача.Автор,Задача.Ссылка,ТекстПисьма);			
				
	КонецЕсли;  
КонецПроцедуры

Процедура ДоработатьНаПродажуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РезультатВыполнения = РезультатВыполненияТочкиВыполнить(Задача) + РезультатВыполнения;
	Записать();
	
	Если Задача.РольИсполнителя = Справочники.РолиИсполнителей.Производственник Тогда 	
		ТекстПисьма = "Заявка №"+Задача.Предмет.Номер+" исполнена. Необходимо Сообщить клиенту."+Символы.ПС
		+ "Ссылка на заявку: "+ ПолучитьНавигационнуюСсылку(Задача.Предмет);
		ОтправитьУведомлениеИсполнителям(Задача.Автор,Задача.Ссылка,ТекстПисьма);			
				
	КонецЕсли;  
КонецПроцедуры
